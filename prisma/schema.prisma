generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String? @unique
  password String
  phone    String?

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  productions                 Production[]
  production_responsibilities ProductionResponsibility[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Role {
  id            Int     @id @default(autoincrement())
  role_name     String  @unique
  active_status Boolean @default(true)

  users User[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model Product {
  id                     Int     @id @default(autoincrement())
  code                   Int
  name                   String
  name_unaccented        String
  description            String
  description_unaccented String
  price                  Int
  priority_order         Int
  icms                   Boolean
  observations           String?
  deleted                Boolean @default(false)

  warehouses             WarehouseProduct[]
  financial_transactions FinancialTransaction[]
  productions            Production[]
  alerts                 Alert[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("products")
}

model Warehouse {
  id                     Int     @id @default(autoincrement())
  acronym                String  @unique
  name                   String
  name_unaccented        String
  description            String
  description_unaccented String
  register_code          String  @unique
  capacity               Int
  stored                 Int
  cep                    String?
  street_name            String?
  house_number           Int?
  city_name              String?
  neighborhood           String?
  state                  String?
  deleted                Boolean @default(false)

  stored_products         WarehouseProduct[]
  productions             Production[]       @relation("production_location")
  destination_productions Production[]       @relation("production_destination")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("warehouses")
}

model WarehouseProduct {
  id         Int     @id @default(autoincrement())
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  warehouse_id Int
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [id])

  quantity Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([warehouse_id, product_id])
  @@map("warehouses_products")
}

model FinancialTransaction {
  id Int @id @default(autoincrement())

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  payment_method_id Int
  payment_method    PaymentMethod @relation(fields: [payment_method_id], references: [id])

  seller_id Int
  seller    Seller @relation(fields: [seller_id], references: [id])

  client_id Int
  client    Client @relation(fields: [client_id], references: [id])

  quantity     Int
  unit_price   Int
  total_amount Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("financial_transactions")
}

model PaymentMethod {
  id            Int     @id @default(autoincrement())
  name          String
  observation   String?
  active_status Boolean @default(true)

  financial_transactions FinancialTransaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("payment_methods")
}

model Seller {
  id              Int     @id @default(autoincrement())
  name            String
  name_unaccented String
  admission_date  String
  cpf             String  @unique
  birth_date      String?
  cep             String?
  street_name     String?
  house_number    Int?
  city_name       String?
  neighborhood    String?
  state           String?
  phone_1         String?
  phone_2         String?
  observation     String?
  dismissal_date  String?
  deleted         Boolean @default(false)

  financial_transactions FinancialTransaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("sellers")
}

model Client {
  id                Int     @id @default(autoincrement())
  name              String
  name_unaccented   String
  email             String  @unique
  cpf               String? @unique
  cnpj              String  @unique
  registration_date String
  birth_date        String?
  cep               String?
  street_name       String?
  house_number      Int?
  city_name         String?
  neighborhood      String?
  state             String?
  phone_1           String
  phone_2           String?
  whatsapp          String?
  observation       String?
  active_status     Boolean @default(true)

  FinancialTransaction FinancialTransaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("clients")
}

model Production {
  id Int @id @default(autoincrement())

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  warehouse_id Int
  warehouse    Warehouse @relation("production_location", fields: [warehouse_id], references: [id])

  destination_warehouse_id Int
  destination_warehouse    Warehouse @relation("production_destination", fields: [destination_warehouse_id], references: [id])

  liters              Int
  storage_temperature Int
  status              String

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  observation String?

  active_status Boolean @default(true)

  production_steps ProductionSteps[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("productions")
}

model ProductionSteps {
  id Int @id @default(autoincrement())

  production_id Int
  production    Production @relation(fields: [production_id], references: [id])

  step_order        Int
  description       String
  production_status String  @default("Pending")
  active_status     Boolean @default(true)

  ProductionResponsibility ProductionResponsibility[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("productions_steps")
}

model Alert {
  id Int @id @default(autoincrement())

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  alert_type String
  message    String

  is_read       Boolean @default(false)
  active_status Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("alerts")
}

model ProductionResponsibility {
  id                  Int       @id @default(autoincrement())
  production_step_id  Int
  responsible_user_id Int
  deadline            DateTime?
  active_status       Boolean   @default(true)

  production_step  ProductionSteps @relation(fields: [production_step_id], references: [id])
  responsible_user User            @relation(fields: [responsible_user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("productions_responsibilities")
}
